version: '3.8'

services:
  # Production API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: capstone-api-prod
    ports:
      - "3000:3000"
    env_file:
      - .env.production
    depends_on:
      - mysql
    networks:
      - capstone-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production MySQL Service
  mysql:
    image: mysql:8.0
    container_name: capstone-mysql-prod
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=capstone_fiverr
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - capstone-prod-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: capstone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - capstone-prod-network
    restart: unless-stopped

networks:
  capstone-prod-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: capstone-prod-br0

volumes:
  mysql_prod_data:
    driver: local
