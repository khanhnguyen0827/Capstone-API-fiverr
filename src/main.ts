import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // CORS
  app.enableCors({
    origin: process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'],
    credentials: true,
  });

  // Global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    }),
  );

  // Swagger documentation
  const config = new DocumentBuilder()
    .setTitle(process.env.SWAGGER_TITLE || 'Capstone Fiverr API')
    .setDescription(process.env.SWAGGER_DESCRIPTION || `
      # üöÄ Capstone Fiverr API Documentation
      
      API ho√†n ch·ªânh cho n·ªÅn t·∫£ng freelance t∆∞∆°ng t·ª± Fiverr, ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi NestJS v√† Prisma.
      
      ## üìã T√≠nh nƒÉng ch√≠nh
      - **Authentication**: ƒêƒÉng k√Ω, ƒëƒÉng nh·∫≠p v·ªõi JWT
      - **User Management**: CRUD ng∆∞·ªùi d√πng v·ªõi role-based access
      - **Job Management**: Qu·∫£n l√Ω c√¥ng vi·ªác, danh m·ª•c, t√¨m ki·∫øm n√¢ng cao
      - **Comments**: B√¨nh lu·∫≠n v√† ƒë√°nh gi√° c√¥ng vi·ªác
      - **Database**: MySQL v·ªõi Prisma ORM
      
      ## üîê Authentication
      S·ª≠ d·ª•ng Bearer token trong header \`Authorization\`:
      \`\`\`
      Authorization: Bearer <your-jwt-token>
      \`\`\`
      
      ## üìä Response Format
      T·∫•t c·∫£ API responses ƒë·ªÅu theo format chu·∫©n:
      \`\`\`json
      {
        "statusCode": 200,
        "message": "Th√¥ng b√°o th√†nh c√¥ng",
        "content": "D·ªØ li·ªáu tr·∫£ v·ªÅ",
        "dateTime": "2024-01-20T10:30:00.000Z"
      }
      \`\`\`
      
      ## üö® Error Handling
      - \`400\`: D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
      - \`401\`: Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá
      - \`403\`: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
      - \`404\`: T√†i nguy√™n kh√¥ng t·ªìn t·∫°i
      - \`500\`: L·ªói server
    `)
    .setVersion(process.env.SWAGGER_VERSION || '1.0.0')
    .setContact('Capstone Team', 'https://github.com/your-repo', 'team@capstone.com')
    .setLicense('MIT', 'https://opensource.org/licenses/MIT')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Nh·∫≠p JWT token',
        in: 'header',
      },
      'JWT-auth',
    )
    .addTag('Authentication', 'C√°c API x√°c th·ª±c ng∆∞·ªùi d√πng')
    .addTag('Users Management', 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng')
    .addTag('Jobs Management', 'Qu·∫£n l√Ω c√¥ng vi·ªác v√† t√¨m ki·∫øm')
    .addTag('Comments', 'B√¨nh lu·∫≠n v√† ƒë√°nh gi√° c√¥ng vi·ªác')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  
  // C·∫•u h√¨nh Swagger UI
  SwaggerModule.setup(process.env.SWAGGER_PATH || 'api-docs', app, document, {
    swaggerOptions: {
      persistAuthorization: true,
      docExpansion: 'list',
      filter: true,
      showRequestDuration: true,
      syntaxHighlight: {
        activate: true,
        theme: 'monokai'
      }
    },
    customCss: `
      .swagger-ui .topbar { display: none }
      .swagger-ui .info .title { color: #2c3e50; font-size: 36px; }
      .swagger-ui .info .description { font-size: 16px; line-height: 1.6; }
      .swagger-ui .scheme-container { background: #f8f9fa; padding: 20px; border-radius: 8px; }
    `,
    customSiteTitle: process.env.SWAGGER_TITLE || 'Capstone Fiverr API Documentation',
    customfavIcon: '/favicon.ico',
  });

  // Global prefix
  app.setGlobalPrefix('api');

  const port = process.env.PORT || 3000;
  await app.listen(port);
  
  console.log(`üöÄ ·ª®ng d·ª•ng ƒëang ch·∫°y tr√™n: http://localhost:${port}`);
  console.log(`üìö API Documentation: http://localhost:${port}/${process.env.SWAGGER_PATH || 'api-docs'}`);
  console.log(`üîç Health Check: http://localhost:${port}/api/health`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
}

bootstrap();