version: '3.8'

services:
  # Backend API Service
  BE:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: con-be_capstone-api-Fiverr
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      DB:
        condition: service_healthy
    environment:
      - DATABASE_URL=mysql://root:123456@DB:3306/capstone_fiverr
      - NODE_ENV=production
      - PORT=3000
    networks:
      - capstone-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service
  DB:
    image: mysql:8.0
    container_name: con-db_capstone-api-Fiverr
    restart: unless-stopped
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=capstone_fiverr
      - MYSQL_USER=capstone_user
      - MYSQL_PASSWORD=capstone_pass
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database.sql:/docker-entrypoint-initdb.d/database.sql
      - ./mysql/conf.d:/etc/mysql/conf.d
    networks:
      - capstone-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # Redis Cache Service (Optional)
  REDIS:
    image: redis:7-alpine
    container_name: con-redis_capstone-api-Fiverr
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - capstone-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  NGINX:
    image: nginx:alpine
    container_name: con-nginx_capstone-api-Fiverr
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - BE
    networks:
      - capstone-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  capstone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
