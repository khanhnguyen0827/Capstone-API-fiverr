version: '3.8'

services:
  # MySQL Database (Staging)
  mysql:
    image: mysql:8.0
    container_name: capstone-mysql-staging
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}_staging
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - mysql_staging_data:/var/lib/mysql
      - ./database.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3306"
    networks:
      - capstone-staging-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # API Application (Staging)
  api:
    image: ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
    container_name: capstone-api-staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3000
      DATABASE_URL: mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@mysql:3306/${DATABASE_NAME}_staging
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      ACCESS_TOKEN_EXPIRES: ${ACCESS_TOKEN_EXPIRES}
      REFRESH_TOKEN_EXPIRES: ${REFRESH_TOKEN_EXPIRES}
    ports:
      - "3001:3000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - capstone-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Staging)
  nginx:
    image: nginx:alpine
    container_name: capstone-nginx-staging
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx-staging:/var/log/nginx
    depends_on:
      - api
    networks:
      - capstone-staging-network

volumes:
  mysql_staging_data:
    driver: local

networks:
  capstone-staging-network:
    driver: bridge
